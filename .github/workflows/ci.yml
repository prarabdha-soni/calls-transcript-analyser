name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: user
          POSTGRES_DB: sales_calls_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ libpq-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test environment file
      run: |
        echo "DATABASE_URL=postgresql://user:password@localhost:5432/sales_calls_test" > .env.test
        echo "DATABASE_URL_ASYNC=postgresql+asyncpg://user:password@localhost:5432/sales_calls_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "SECRET_KEY=test_secret_key" >> .env.test
    
    - name: Run linting
      run: |
        black --check --diff .
        isort --check-only --diff .
        mypy app/ --ignore-missing-imports --no-strict-optional --ignore-errors
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://user:password@localhost:5432/sales_calls_test
        DATABASE_URL_ASYNC: postgresql+asyncpg://user:password@localhost:5432/sales_calls_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: sales-call-analytics:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max 